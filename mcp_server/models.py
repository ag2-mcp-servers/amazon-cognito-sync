# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:17:23+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, constr


class AlreadyStreamedException(RootModel[Any]):
    root: Any


class ApplicationArn(
    RootModel[constr(pattern=r'arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+')]
):
    root: constr(pattern=r'arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+')


class ApplicationArnList(RootModel[List[ApplicationArn]]):
    root: List[ApplicationArn]


class AssumeRoleArn(
    RootModel[
        constr(pattern=r'arn:aws:iam::\d+:role/.*', min_length=20, max_length=2048)
    ]
):
    root: constr(pattern=r'arn:aws:iam::\d+:role/.*', min_length=20, max_length=2048)


class Boolean(RootModel[bool]):
    root: bool


class BulkPublishRequest(BaseModel):
    pass


class BulkPublishStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class ClientContext(RootModel[str]):
    root: str


class CognitoEventType(RootModel[str]):
    root: str


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class DatasetName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.:-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.:-]+', min_length=1, max_length=128)


class Date(RootModel[datetime]):
    root: datetime


class DeleteDatasetRequest(BaseModel):
    pass


class DescribeDatasetRequest(BaseModel):
    pass


class DescribeIdentityPoolUsageRequest(BaseModel):
    pass


class DescribeIdentityUsageRequest(BaseModel):
    pass


class DeviceId(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class DuplicateRequestException(RootModel[Any]):
    root: Any


class GetBulkPublishDetailsRequest(BaseModel):
    pass


class GetCognitoEventsRequest(BaseModel):
    pass


class GetIdentityPoolConfigurationRequest(BaseModel):
    pass


class IdentityId(
    RootModel[constr(pattern=r'[\w-]+:[0-9a-f-]+', min_length=1, max_length=55)]
):
    root: constr(pattern=r'[\w-]+:[0-9a-f-]+', min_length=1, max_length=55)


class IdentityPoolId(
    RootModel[constr(pattern=r'[\w-]+:[0-9a-f-]+', min_length=1, max_length=55)]
):
    root: constr(pattern=r'[\w-]+:[0-9a-f-]+', min_length=1, max_length=55)


class Integer(RootModel[int]):
    root: int


class IntegerString(RootModel[int]):
    root: int


class InternalErrorException(RootModel[Any]):
    root: Any


class InvalidConfigurationException(RootModel[Any]):
    root: Any


class InvalidLambdaFunctionOutputException(RootModel[Any]):
    root: Any


class InvalidParameterException(RootModel[Any]):
    root: Any


class LambdaFunctionArn(RootModel[str]):
    root: str


class LambdaThrottledException(RootModel[Any]):
    root: Any


class LimitExceededException(RootModel[Any]):
    root: Any


class ListDatasetsRequest(BaseModel):
    pass


class ListIdentityPoolUsageRequest(BaseModel):
    pass


class ListRecordsRequest(BaseModel):
    pass


class Long(RootModel[int]):
    root: int


class NotAuthorizedException(RootModel[Any]):
    root: Any


class Operation(Enum):
    replace = 'replace'
    remove = 'remove'


class Platform(Enum):
    APNS = 'APNS'
    APNS_SANDBOX = 'APNS_SANDBOX'
    GCM = 'GCM'
    ADM = 'ADM'


class PushSync(BaseModel):
    ApplicationArns: Optional[ApplicationArnList] = None
    RoleArn: Optional[AssumeRoleArn] = None


class PushToken(RootModel[str]):
    root: str


class RecordKey(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class RecordValue(RootModel[constr(max_length=1048575)]):
    root: constr(max_length=1048575)


class RegisterDeviceRequest(BaseModel):
    Platform_1: Platform = Field(..., alias='Platform')
    Token: PushToken


class RegisterDeviceResponse(BaseModel):
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')


class ResourceConflictException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class StreamName(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class StreamingStatus(Enum):
    ENABLED = 'ENABLED'
    DISABLED = 'DISABLED'


class String(RootModel[str]):
    root: str


class SubscribeToDatasetRequest(BaseModel):
    pass


class SubscribeToDatasetResponse(BaseModel):
    pass


class SyncSessionToken(RootModel[str]):
    root: str


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UnsubscribeFromDatasetRequest(BaseModel):
    pass


class UnsubscribeFromDatasetResponse(BaseModel):
    pass


class CognitoStreams(BaseModel):
    RoleArn: Optional[AssumeRoleArn] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    StreamingStatus_1: Optional[StreamingStatus] = Field(None, alias='StreamingStatus')


class IdentitypoolsIdentityPoolIdConfigurationPostRequest(BaseModel):
    CognitoStreams_1: Optional[CognitoStreams] = Field(
        None,
        alias='CognitoStreams',
        description='Configuration options for configure Cognito streams.',
    )
    PushSync_1: Optional[PushSync] = Field(
        None,
        alias='PushSync',
        description='Configuration options to be applied to the identity pool.',
    )


class IdentitypoolsIdentityPoolIdEventsPostRequest(BaseModel):
    Events: Dict[str, LambdaFunctionArn] = Field(
        ..., description='The events to configure'
    )


class IdentitypoolsIdentityPoolIdIdentityIdentityIdDevicePostRequest(BaseModel):
    Platform_1: Platform = Field(
        ...,
        alias='Platform',
        description='The SNS platform type (e.g. GCM, SDM, APNS, APNS_SANDBOX).',
    )
    Token: str = Field(..., description='The push token.')


class BulkPublishResponse(BaseModel):
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')


class Dataset(BaseModel):
    CreationDate: Optional[Date] = None
    DataStorage: Optional[Long] = None
    DatasetName_1: Optional[DatasetName] = Field(None, alias='DatasetName')
    IdentityId_1: Optional[IdentityId] = Field(None, alias='IdentityId')
    LastModifiedBy: Optional[String] = None
    LastModifiedDate: Optional[Date] = None
    NumRecords: Optional[Long] = None


class DatasetList(RootModel[List[Dataset]]):
    root: List[Dataset]


class DeleteDatasetResponse(BaseModel):
    Dataset_1: Optional[Dataset] = Field(None, alias='Dataset')


class DescribeDatasetResponse(BaseModel):
    Dataset_1: Optional[Dataset] = Field(None, alias='Dataset')


class Events(RootModel[Optional[Dict[str, LambdaFunctionArn]]]):
    root: Optional[Dict[str, LambdaFunctionArn]] = None


class GetBulkPublishDetailsResponse(BaseModel):
    BulkPublishCompleteTime: Optional[Date] = None
    BulkPublishStartTime: Optional[Date] = None
    BulkPublishStatus_1: Optional[BulkPublishStatus] = Field(
        None, alias='BulkPublishStatus'
    )
    FailureMessage: Optional[String] = None
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')


class GetCognitoEventsResponse(BaseModel):
    Events_1: Optional[Events] = Field(None, alias='Events')


class GetIdentityPoolConfigurationResponse(BaseModel):
    CognitoStreams_1: Optional[CognitoStreams] = Field(None, alias='CognitoStreams')
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')
    PushSync_1: Optional[PushSync] = Field(None, alias='PushSync')


class IdentityPoolUsage(BaseModel):
    DataStorage: Optional[Long] = None
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')
    LastModifiedDate: Optional[Date] = None
    SyncSessionsCount: Optional[Long] = None


class IdentityPoolUsageList(RootModel[List[IdentityPoolUsage]]):
    root: List[IdentityPoolUsage]


class IdentityUsage(BaseModel):
    DataStorage: Optional[Long] = None
    DatasetCount: Optional[Integer] = None
    IdentityId_1: Optional[IdentityId] = Field(None, alias='IdentityId')
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')
    LastModifiedDate: Optional[Date] = None


class ListDatasetsResponse(BaseModel):
    Count: Optional[Integer] = None
    Datasets: Optional[DatasetList] = None
    NextToken: Optional[String] = None


class ListIdentityPoolUsageResponse(BaseModel):
    Count: Optional[Integer] = None
    IdentityPoolUsages: Optional[IdentityPoolUsageList] = None
    MaxResults: Optional[Integer] = None
    NextToken: Optional[String] = None


class MergedDatasetNameList(RootModel[List[String]]):
    root: List[String]


class Record(BaseModel):
    DeviceLastModifiedDate: Optional[Date] = None
    Key: Optional[RecordKey] = None
    LastModifiedBy: Optional[String] = None
    LastModifiedDate: Optional[Date] = None
    SyncCount: Optional[Long] = None
    Value: Optional[RecordValue] = None


class RecordList(RootModel[List[Record]]):
    root: List[Record]


class RecordPatch(BaseModel):
    DeviceLastModifiedDate: Optional[Date] = None
    Key: RecordKey
    Op: Operation
    SyncCount: Long
    Value: Optional[RecordValue] = None


class RecordPatchList(RootModel[List[RecordPatch]]):
    root: List[RecordPatch]


class SetCognitoEventsRequest(BaseModel):
    Events_1: Events = Field(..., alias='Events')


class SetIdentityPoolConfigurationRequest(BaseModel):
    CognitoStreams_1: Optional[CognitoStreams] = Field(None, alias='CognitoStreams')
    PushSync_1: Optional[PushSync] = Field(None, alias='PushSync')


class SetIdentityPoolConfigurationResponse(BaseModel):
    CognitoStreams_1: Optional[CognitoStreams] = Field(None, alias='CognitoStreams')
    IdentityPoolId_1: Optional[IdentityPoolId] = Field(None, alias='IdentityPoolId')
    PushSync_1: Optional[PushSync] = Field(None, alias='PushSync')


class UpdateRecordsRequest(BaseModel):
    DeviceId_1: Optional[DeviceId] = Field(None, alias='DeviceId')
    RecordPatches: Optional[RecordPatchList] = None
    SyncSessionToken_1: SyncSessionToken = Field(..., alias='SyncSessionToken')


class UpdateRecordsResponse(BaseModel):
    Records: Optional[RecordList] = None


class IdentitypoolsIdentityPoolIdIdentitiesIdentityIdDatasetsDatasetNamePostRequest(
    BaseModel
):
    DeviceId: Optional[constr(min_length=1, max_length=256)] = Field(
        None, description='The unique ID generated for this device by Cognito.'
    )
    RecordPatches: Optional[List[RecordPatch]] = Field(
        None, description='A list of patch operations.'
    )
    SyncSessionToken: str = Field(
        ...,
        description='The SyncSessionToken returned by a previous call to ListRecords for this dataset and identity.',
    )


class DescribeIdentityPoolUsageResponse(BaseModel):
    IdentityPoolUsage_1: Optional[IdentityPoolUsage] = Field(
        None, alias='IdentityPoolUsage'
    )


class DescribeIdentityUsageResponse(BaseModel):
    IdentityUsage_1: Optional[IdentityUsage] = Field(None, alias='IdentityUsage')


class ListRecordsResponse(BaseModel):
    Count: Optional[Integer] = None
    DatasetDeletedAfterRequestedSyncCount: Optional[Boolean] = None
    DatasetExists: Optional[Boolean] = None
    DatasetSyncCount: Optional[Long] = None
    LastModifiedBy: Optional[String] = None
    MergedDatasetNames: Optional[MergedDatasetNameList] = None
    NextToken: Optional[String] = None
    Records: Optional[RecordList] = None
    SyncSessionToken: Optional[String] = None
